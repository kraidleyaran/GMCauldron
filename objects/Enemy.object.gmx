<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>EnemySprite</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>GenerateProperties(self);
GenerateEnemyProperties(self);
GenerateDefaultEnemyProperties(self);
self.CurrentDirection = Direction.South;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CheckCurrentAnimation(self);
CheckAggroRange(self);
switch (self.Aggrod)
{
    case true:
        switch(CheckLeashRange(self))
        {
            case true:
                //ExecuteDefaultAttackPattern(self);                
                break;
            case false:
                if (CurrentAction != Action.Move)
                {
                    CurrentAction = Action.Move;
                }
                break;  
        }
    break;
    case false:
        if (CurrentAction != Action.Move)
        {
            CurretAction = Action.Move;
        }
        
}

//self.CurrentDirection = Direction.South;
SetAnimationFromAction(self, self.CurrentAction);
MoveEnemy(self);

switch((self.Health &lt;= 0))
{
    case true:
        instance_destroy();
        break;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Weapon">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var weapon = other.id;

var weaponIndex = GetIndexOfObject(self.HitList, weapon)
if (weaponIndex &gt;= 0)
{
    if !(instance_exists(GetFromList(self.HitList, weaponIndex)))
    {
        RemoveFromList(self.HitList, weaponIndex);
    }
    return false;
}

AddToList(self.HitList, weapon);

switch(other.Alignment)
{
    case Alignment.Hero:
        self.Health -= other.EnemyDamage
        break;
    case Alignment.Neutral:
        self.Health -= other.EnemyDamage
        break;
    case Alignment.Monster:
        self.Health -= other.EnemyDamage
        self.Health += other.AllyHealing;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Terrain">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (place_meeting(self.x,self.y, other))
{
    switch (self.CurrentDirection)
    {
        case Direction.North:
            self.y += self.MoveSpeed + 1;
            break;
        case Direction.East:
            self.x -= self.MoveSpeed + 1;
            break;
        case Direction.West:
            self.x += self.MoveSpeed + 1;
            break;
        case Direction.South:
            self.y -= self.MoveSpeed + 1;
            break;
    }
}
GetOpenDirection(self);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
